- name: Install ansible dependencies
  apt: name={{ item }} state=present
  with_items:
    - python-apt

- include: debian-jessie.yml
  when: ansible_distribution == 'Debian' and ansible_distribution_release == 'jessie'
- include: dependencies.yml
  when: not (ansible_distribution == 'Debian' and ansible_distribution_release == 'jessie')

# Configure corosync
- name: Configure corosync
  template: src=corosync.conf dest=/etc/corosync/
  notify: corosync-restart

# Generate authkey
- name: Check if /etc/corosync/authkey exists
  stat: path=/etc/corosync/authkey
  register: authkey_stat
  run_once: true

- name: Generate authkey
  shell: "corosync-keygen & sleep 1; while pgrep corosync-keygen; do dd if=/dev/urandom of=/tmp/100 bs=1024 count=100000; for i in {1..10}; do cp /tmp/100 /tmp/tmp_$i_$RANDOM; done; shred -u /tmp/tmp_* /tmp/100; done"
  when: not authkey_stat.stat.exists
  run_once: true

- name: Create temporary copy of authkey
  shell: |
    cp -f /etc/corosync/authkey /tmp/authkey
    chmod +r /tmp/authkey
  when: not authkey_stat.stat.exists
  run_once: true

#FIXME - use fetch module?
- name: Retrieve authkey
  shell: |
    scp {{ hostvars[groups[pm_group][0]]['ansible_ssh_host'] }}:/tmp/authkey tmp_authkey
    chmod u+w tmp_authkey
  become: no
  delegate_to: 127.0.0.1
  run_once: true
  when: not authkey_stat.stat.exists

- name: Remove temporary copy of authkey
  file: path=/tmp/authkey state=absent
  when: not authkey_stat.stat.exists
  run_once: true

- name: Deploy authkey
  copy: src=tmp_authkey dest=/etc/corosync/authkey owner=root group=root mode=0400
  when: inventory_hostname != "{{ groups[pm_group][0] }}" and not authkey_stat.stat.exists

- name: Remove local copy of authkey
  file: path=tmp_authkey state=absent
  become: no
  delegate_to: 127.0.0.1
  run_once: true
  when: not authkey_stat.stat.exists
# END Generate authkey

# Enable corosync
- name: corosync enabled and started
  service: name=corosync state=started enabled=yes

# Make sure corosync has current config (otherwise next tasks may fail)
- meta: flush_handlers

# Enable pacemaker
- name: pacemaker enabled and started
  service: name=pacemaker state=started enabled=yes
  register: pm_restart

# Wait for pacemaker to come up and elect a dc
- pause: seconds=40
  when: pm_restart.changed

# Configure pacemaker
- name: Configure properties
  pacemaker: resource="property {{ item }}"
  with_items: "{{ pm_properties }}"
  run_once: yes
