- name: Install ansible dependencies
  apt: name={{ item }} state=present
  with_items:
    - python-apt

- name: Repos Debian stretch (Testing) and ppa.mopg.com for pacemaker
  apt_repository: repo={{ item }} state=present
  with_items:
    - 'deb http://ftp.de.debian.org/debian stretch main'
    - 'deb http://ppa.mmogp.com/apt/debian jessie main'

- name: Install ppa.mmopg.com key
  apt_key: url=http://ppa.mmogp.com/apt/debian/mmod.gpg.key state=present

- name: "Don't use testing by default and prefer mmopg ppa"
  copy: src={{ item }} dest=/etc/apt/preferences.d/
  with_items:
    - "preferences-testing"
    - "preferences-mmogp"

- name: Install ha dependencies from testing
  apt: name={{ item }} state=present default_release=stretch update_cache=yes
  with_items:
    - libqb0
#    - fence-agents

- name: Install ha dependencies from mmopg ppa
  apt: name={{ item }} state=present update_cache=yes
  with_items:
    - corosync
    - pacemaker
    - crmsh

# Corosync konfigurieren
- name: Configure corosync
  template: src=corosync.conf dest=/etc/corosync/

# Generate authkey
- name: Check if /etc/corosync/authkey exists
  stat: path=/etc/corosync/authkey
  register: authkey_stat
  run_once: true

- name: Generate authkey
  shell: "corosync-keygen & sleep 1; while pgrep corosync-keygen; do dd if=/dev/urandom of=/tmp/100 bs=1024 count=100000; for i in {1..10}; do cp /tmp/100 /tmp/tmp_$i_$RANDOM; done; shred -u /tmp/tmp_* /tmp/100; done"
  when: not authkey_stat.stat.exists
  run_once: true

- name: Create temporary copy of authkey
  shell: |
    cp -f /etc/corosync/authkey /tmp/authkey
    chmod +r /tmp/authkey
  when: not authkey_stat.stat.exists
  run_once: true

- name: Retrieve authkey
  shell: |
    scp {{ hostvars[groups['nodes'][0]]['ansible_ssh_host'] }}:/tmp/authkey tmp_authkey
    chmod u+w tmp_authkey
  sudo: no
  delegate_to: 127.0.0.1
  run_once: true
  when: not authkey_stat.stat.exists

- name: Remove temporary copy of authkey
  file: path=/tmp/authkey state=absent
  when: not authkey_stat.stat.exists
  run_once: true

- name: Deploy authkey
  copy: src=tmp_authkey dest=/etc/corosync/authkey owner=root group=root mode=0400
  when: inventory_hostname != "{{ groups['nodes'][0] }}" and not authkey_stat.stat.exists

- name: Remove local copy of authkey
  file: path=tmp_authkey state=absent
  sudo: no
  delegate_to: 127.0.0.1
  run_once: true
  when: not authkey_stat.stat.exists
# END Generate authkey

# Enable corosync
- name: corosync enabled and started
  service: name=corosync state=started enabled=yes

# Enable pacemaker
- name: pacemaker enabled and started
  service: name=pacemaker state=started enabled=yes

